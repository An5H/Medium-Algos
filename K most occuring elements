import java.io.*;
import java.util.*;
import java.lang.*;

class GfG {
    
    
    public static void main (String[] args) throws IOException  {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
		    String inputLine[] = br.readLine().trim().split(" ");
		    int n = Integer.parseInt(inputLine[0]);
		    inputLine = br.readLine().trim().split(" ");
		    int[] arr = new int[n];
		    for(int i=0; i<n; i++){
		        arr[i]=Integer.parseInt(inputLine[i]);
		    }
		    int k = Integer.parseInt(br.readLine().trim());
		    new solve().kMostOccuring(arr, n, k);
		}
	}
}// } Driver Code Ends


class solve{
    void kMostOccuring(int arr[], int n, int k){
        Map <Integer, Integer> map = new HashMap <>();
        for(int i: arr){
            if(map.containsKey(i)){
                map.put(i, map.get(i) + 1);
            }
            else{
                map.put(i, 1);
            }
        }
        PriorityQueue <Map.Entry<Integer, Integer>> queue =  
           new PriorityQueue<>( 
            (a, b) -> a.getValue().equals(b.getValue()) ?  
                      Integer.compare(b.getKey(), a.getKey()) :  
                      Integer.compare(b.getValue(), a.getValue())); 
  
        // Insert the data from the map to the Priority Queue. 
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) 
            queue.offer(entry); 
  
        // Print the top k elements 
        int sum = 0;
        for (int i = 0; i < k; i++) { 
            sum += queue.poll().getValue(); 
        }
        System.out.println(sum);
    }
}
