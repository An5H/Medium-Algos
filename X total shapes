import java.lang.*;
import java.io.*;
class GFG
{
	public static void main (String[] args) throws java.lang.Exception
	 {
    	 BufferedReader ob = new BufferedReader(new InputStreamReader(System.in));
    	 int t = Integer.parseInt(ob.readLine());
    	 while(t-- > 0){
    	     String rowCol[] = ob.readLine().trim().split("\\s+");
    	     int rows = Integer.parseInt(rowCol[0]);
    	     int cols = Integer.parseInt(rowCol[1]);
    	     String elements[] = ob.readLine().trim().split("\\s+");
    	     char arr[][] = new char[rows][cols];
    	     for(int i = 0; i < rows; i++){
    	         for(int j = 0; j < cols; j++){
    	             arr[i][j] = elements[i].charAt(j);
    	         }
    	     }
    	     System.out.println(new check().compute(arr));
    	 }
	 }
}
class check{
    boolean visited[][];
    int compute(char arr[][]){
        int count = 0;
        visited = new boolean[arr.length][arr[0].length];
        for(int i = 0; i < arr.length; i++){
            for(int j = 0; j < arr[0].length; j++){
                if(arr[i][j] == 'X' && !visited[i][j]){
                    dfs(arr, i, j, arr.length, arr[0].length);
                    count++;
                }
            }
        }
        return count;
    }
    void dfs(char arr[][], int i, int j, int rows, int cols){
        if(arr[i][j] == 'X' && !visited[i][j]){
            visited[i][j] = true;
            if(i+1 < rows){dfs(arr, i+1, j, rows, cols);}
            if(i-1 >= 0){dfs(arr, i-1, j, rows, cols);}
            if(j+1 < cols){dfs(arr, i, j+1, rows, cols);}
            if(j-1 >= 0){dfs(arr, i, j-1, rows, cols);}
        }else{
            return;
        }
    }
}



