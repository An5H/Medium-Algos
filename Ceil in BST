//Initial Template for Java
import java.io.*;
import java.lang.*;
import java.util.*;

class Node {
    int data;
    Node left, right;
    Node(int key){
        this.data = key;
        this.left = this.right = null;
    }
}

class ceilInBST { 

    static Node insertInBST(Node root, int key) { 
        if (root == null) return new Node(key); 
	    if (key < root.data) root.left = insertInBST(root.left, key); 
	    else root.right = insertInBST(root.right, key); 
	    return root; 
    }
    
    public static void main (String[] args) throws IOException  {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
		    String inputLine[] = br.readLine().trim().split(" ");
		    int n = Integer.parseInt(inputLine[0]);
		    Node root = null;
		    inputLine = br.readLine().trim().split(" ");
		    root = insertInBST(root, Integer.parseInt(inputLine[0]));
		    for(int i=1; i<n; i++){
		        insertInBST(root, Integer.parseInt(inputLine[i]));
		    }
		    int k = Integer.parseInt(br.readLine().trim());
		    GfG g = new GfG();
		    System.out.println(g.findCeil(root, k));
		}
	}
}

// } Driver Code Ends


//User function Template for Java

/*
class Node {
    int data;
    Node left, right;
    Node(int key){
        this.data = key;
        this.left = this.right = null;
    }
}
*/

class GfG {
    static ArrayList <Integer> list = new ArrayList <>();
    static int findCeil(Node root, int key) 
    {   list.clear();
        ArrayList <Integer> list = new ArrayList <>();
        list = getInorder(root);
        if(list.contains(key)){
            return key;
        }
        int bigger = Integer.MAX_VALUE;
        Collections.sort(list);
        for(int i = 0; i < list.size(); i++){
            if(list.get(i) > key){
                bigger = list.get(i);
                break;
            }
        }
        if(bigger == Integer.MAX_VALUE){
            return -1;
        }
        return bigger;
    } 
    static ArrayList <Integer> getInorder(Node root){
        if(root != null){
            getInorder(root.left);
            list.add(root.data);
            getInorder(root.right);
        }
        return list;
    } 
}

