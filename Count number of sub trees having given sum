//Initial Template for Java

import java.util.LinkedList; 
import java.util.Queue; 
import java.io.*;
import java.util.*;

class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

class GfG {
    
    static Node buildTree(String str){
        
        if(str.length()==0 || str.charAt(0)=='N'){
            return null;
        }
        
        String ip[] = str.split(" ");
        // Create the root of the tree
        Node root = new Node(Integer.parseInt(ip[0]));
        // Push the root to the queue
        
        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);
        // Starting from the second element
        
        int i = 1;
        while(queue.size()>0 && i < ip.length) {
                
            // Get and remove the front of the queue
            Node currNode = queue.peek();
            queue.remove();
                
            // Get the current node's value from the string
            String currVal = ip[i];
                
            // If the left child is not null
            if(!currVal.equals("N")) {
                    
                // Create the left child for the current node
                currNode.left = new Node(Integer.parseInt(currVal));
                // Push it to the queue
                queue.add(currNode.left);
            }
                
            // For the right child
            i++;
            if(i >= ip.length)
                break;
                
            currVal = ip[i];
                
            // If the right child is not null
            if(!currVal.equals("N")) {
                    
                // Create the right child for the current node
                currNode.right = new Node(Integer.parseInt(currVal));
                    
                // Push it to the queue
                queue.add(currNode.right);
            }
            i++;
        }
        
        return root;
    }
    static void printInorder(Node root)
    {
        if(root == null)
            return;
            
        printInorder(root.left);
        System.out.print(root.data+" ");
        
        printInorder(root.right);
    }
    
	public static void main (String[] args) throws IOException {
	        BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
	        
	        int t=Integer.parseInt(br.readLine());
	        while(t-- > 0){
	            String s= br.readLine();
	            Node root = buildTree(s);
	            
	            
                int x=Integer.parseInt(br.readLine());
	            Tree tr = new Tree();
                System.out.println(tr.countSubtreesWithSumX(root,x));
	            
	        }
	    
	}
}

// } Driver Code Ends


//User function Template for Java


/*class Node
{
    int data;
    Node left,right;
    Node(int d)
    {
        data=d;
        left=right=null;
    }
}*/

// Return the count of the sub-trees having sum as X.

class Tree
{
    static class INT { 
        int v; 
        INT(int a) 
        { 
            v = a; 
        } 
    }
    int countSubtreesWithSumX(Node root, int x)
    {
    	if (root == null)  
        return 0;  
      
        INT count = new INT(0);  
      
        // sum of nodes in the left subtree  
        int ls = countSubtreesWithSumX(root.left, 
                                       count, x);  
      
        // sum of nodes in the right subtree  
        int rs = countSubtreesWithSumX(root.right,  
                                       count, x);  
      
        // if tree's nodes sum == x  
        if ((ls + rs + root.data) == x)  
            count.v++;  
      
        // required count of subtrees  
        return count.v;
    }
    static int countSubtreesWithSumX(Node root,  
                          INT count, int x){  
        // if tree is empty  
        if (root == null)  
            return 0;  
      
        // sum of nodes in the left subtree  
        int ls = countSubtreesWithSumX(root.left,  
                                       count, x);  
      
        // sum of nodes in the right subtree  
        int rs = countSubtreesWithSumX(root.right,  
                                       count, x);  
      
        // sum of nodes in the subtree  
        // rooted with 'root.data'  
        int sum = ls + rs + root.data;  
      
        // if true  
        if (sum == x)  
            count.v++;  
      
        // return subtree's nodes sum  
        return sum;  
    }
}

