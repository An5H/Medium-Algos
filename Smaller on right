import java.util.*;
/* Author: An5H :) */
class fastReader
{
    BufferedReader br;
    StringTokenizer st;

    public fastReader()
    {
        br = new BufferedReader(new InputStreamReader(System.in));
    }

    String next(){

        while (st == null || !st.hasMoreElements()){

            try{
                st = new StringTokenizer(br.readLine());
            }

            catch (IOException e){}
        }
        return st.nextToken();
    }

    int nextInt(){
        return Integer.parseInt(next());
    }

    long nextLong(){
        return Long.parseLong(next());
    }

    double nextDouble(){
        return Double.parseDouble(next());
    }

    String nextLine(){
        String str = "";
        try{
            str = br.readLine();
        }
        catch (IOException e){}
        return str;
    }
}
class GFG{

	public static void main (String[] args) throws java.lang.Exception{
		StringBuilder sb = new StringBuilder();
		fastReader ob = new fastReader();
		int t = ob.nextInt();
		while(t-- > 0){
		    int size = ob.nextInt();
		    String elements[] = ob.nextLine().trim().split("\\s+");
		    int arr[] = new int[size];
		    for(int i = 0; i < size; i++){
		        arr[i] = Integer.parseInt(elements[i]);
		    }
		    System.out.println(new check().smallerOnRight(arr, arr.length));
		}
	}
}
class check{
    static int smallerOnRight(int arr[],int n){
        TreeSet <Integer> s = new TreeSet <>();
        TreeSet <Integer> headSet = new TreeSet <>();
        s.add(arr[n-1]);
        int count=0;
        for(int i = n-2; i >= 0; i--){
            headSet = (TreeSet <Integer>) s.headSet(arr[i]);
            count = Math.max(count, headSet.size());
            s.add(arr[i]);
        }
        return count;
    }
}
