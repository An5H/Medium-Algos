//Initial Template for Java


//Contributed by Sudarshan Sharma
import java.util.*;
import java.io.*;
class Node{
    int data;
    Node left,right;
    Node(int d){
        data=d;
        left=right=null;
    }
}


class GfG{
    
    public static void main(String[] args)throws IOException{
        //Scanner sc=new Scanner(System.in);
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        int t=Integer.parseInt(br.readLine());
       
        while(t > 0)
           {
               Queue<Node> q = new LinkedList<>();
        
            int n = Integer.parseInt(br.readLine());
            String input[] = br.readLine().trim().split(" ");
            
            Node root = null;
            int j=0;
            while(n > 0){
            int a1 = Integer.parseInt(input[j]);
            int a2 = Integer.parseInt(input[j+1]);
            char lr = input[j+2].charAt(0);
            j+=3;
            
            if(root == null)
            {
                root = new Node(a1);
                q.add(root);
            }
            
            Node pick = q.peek();
            
            q.remove();
            
            if(lr=='L'){
                pick.left = new Node(a2);
                q.add(pick.left);
            }
            a1 = Integer.parseInt(input[j]);
            a2 = Integer.parseInt(input[j+1]);
            lr = input[j+2].charAt(0);
            j += 3;
            
            if(lr=='R'){
                pick.right = new Node(a2);
                q.add(pick.right);
            }
            
            n-=2;
        }
            new View().topView(root);
            System.out.println();
            t--;
        }
    }
}

   


// } Driver Code Ends

class View
{
    // function should print the topView of the binary tree
    static void topView(Node root)
    {
        class queueObj{
            Node node;
            int hd;
            queueObj(Node node, int hd){
                this.node = node;
                this.hd = hd;
            }
        }
        
        Queue <queueObj> q = new LinkedList <>();
        Map <Integer, Node> map = new TreeMap <>();
        
        if(root == null){
            return;
        }
        else{
            q.add(new queueObj(root, 0));
        }
        
        while(!q.isEmpty()){
            queueObj cur = q.poll();
            if(!map.containsKey(cur.hd)){
                map.put(cur.hd, cur.node);
            }
            if(cur.node.left != null){
                q.add(new queueObj(cur.node.left, cur.hd - 1));
            }
            if(cur.node.right != null){
                q.add(new queueObj(cur.node.right, cur.hd + 1));
            }
        }
        for(Map.Entry <Integer, Node> mp: map.entrySet()){
            System.out.print(mp.getValue().data+" ");
        }
    }
}
