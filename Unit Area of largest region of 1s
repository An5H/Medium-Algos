// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class Driverclass {
    static int SIZE = 100;
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();

            int g[][] = new int[SIZE][SIZE];

            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) g[i][j] = sc.nextInt();
            }

            System.out.println(new Area().findMaxArea(n, m, g));
        }
    }
}// } Driver Code Ends


// User function Template for Java

/*
*   SIZE: declared globally for matrix definition
*   N, M: row and column of matrix
*   A[][]: 2D matrix from input
*/
class Area {
    int ans = 0;
    int count = 0;
    int findMaxArea(int N, int M, int A[][]) {
        for(int i = 0; i < N; i++){
            for(int j = 0; j < M; j++){
                count = 0;
                dfs(N, M, i, j, A);
                if(ans < count){
                    ans = count;
                }
            }
        }
        return ans;
    }
    void dfs(int row, int col, int i, int j, int A[][]){
        if(i < 0 || i >= row || j < 0 || j >= col){
            return;
        }
        if(A[i][j] == 0){
            return;
        }
        count++;
        A[i][j] = 0;
        
        dfs(row,col,i+1,j,A);
        dfs(row,col,i-1,j,A);
        dfs(row,col,i,j+1,A);
        dfs(row,col,i,j-1,A);
        dfs(row,col,i-1,j-1,A);
        dfs(row,col,i+1,j+1,A);
        dfs(row,col,i+1,j-1,A);
        dfs(row,col,i-1,j+1,A);
    }
}
