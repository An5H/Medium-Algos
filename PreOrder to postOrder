import java.lang.*;
import java.io.*;
class GFG{
    static class INT{ 
        int data; 
        INT(int d) 
        { 
            data=d; 
        } 
    }
	public static void main (String[] args) throws java.lang.Exception
	{
	    BufferedReader ob = new BufferedReader(new InputStreamReader(System.in));
	    int t = Integer.parseInt(ob.readLine());
	    while(t-- > 0){
	        int size = Integer.parseInt(ob.readLine());
	        String ele[] = ob.readLine().trim().split(" ");
	        int arr[] = new int [size];
	        for(int i = 0; i < size; i++){
	            arr[i] = Integer.parseInt(ele[i]);
	        }
	        INT preIndex = new INT(0);  
            findPostOrderUtil(arr, arr.length, Integer.MIN_VALUE, Integer.MAX_VALUE, preIndex);
            System.out.println();
	    }
	}
	static void findPostOrderUtil(int pre[], int n, int minval,  
                    int maxval, INT preIndex){  
  
        // If entire preorder array is traversed then  
        // return as no more element is left to be  
        // added to post order array.  
        if (preIndex.data == n)  
            return;  
      
        // If array element does not lie in range specified,  
        // then it is not part of current subtree.  
        if (pre[preIndex.data] < minval || pre[preIndex.data] > maxval) {  
            return;  
        }  
      
        // Store current value, to be printed later, after  
        // printing left and right subtrees. Increment  
        // preIndex to find left and right subtrees,  
        // and pass this updated value to recursive calls.  
        int val = pre[preIndex.data];  
        preIndex.data++;  
      
        // All elements with value between minval and val  
        // lie in left subtree.  
        findPostOrderUtil(pre, n, minval, val, preIndex);  
      
        // All elements with value between val and maxval  
        // lie in right subtree.  
        findPostOrderUtil(pre, n, val, maxval, preIndex);  
      
        System.out.print( val + " ");  
    }
}
