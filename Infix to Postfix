import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    
	public static void main (String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
		    System.out.println(new solve().infixToPostfix(br.readLine().trim()));
		}
	}
}// } Driver Code Ends


class solve{
	public static String infixToPostfix(String exp) {
		Stack<Character>stack = new Stack<>();
		String result = "";
		for(int i = 0; i < exp.length(); i++){
		    char c = exp.charAt(i);
		    if(Character.isLetterOrDigit(c)){
		        result += c; 
		    }
		    else if(c == '('){
		        stack.push(c);
		    }
		    else if(c == ')'){
		        while (!stack.isEmpty() && stack.peek() != '(') 
                    result += stack.pop(); 
                  
                if (!stack.isEmpty() && stack.peek() != '(') 
                    return ""; // invalid expression                 
                else
                    stack.pop();
		    }
		    else // an operator is encountered 
            { 
                while (!stack.isEmpty() && Prec(c) <= Prec(stack.peek())){ 
                    if(stack.peek() == '(') 
                        return "Invalid Expression"; 
                    result += stack.pop(); 
                } 
                stack.push(c); 
            }
		}
		while (!stack.isEmpty()){ 
            if(stack.peek() == '(') 
                return ""; 
            result += stack.pop(); 
         } 
        return result;
	} 
	static int Prec(char ch) 
    { 
        switch (ch) 
        { 
        case '+': 
        case '-': 
            return 1; 
       
        case '*': 
        case '/': 
            return 2; 
       
        case '^': 
            return 3; 
        } 
        return -1; 
    }
}
