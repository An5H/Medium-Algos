// Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class Driverclass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int N = sc.nextInt();
            int M = sc.nextInt();

            ArrayList<ArrayList<Integer>> list = new ArrayList<>(N);

            // creating arraylist of arraylist
            for (int i = 0; i < N; i++) {
                ArrayList<Integer> temp = new ArrayList<>(M);
                list.add(i, temp);
            }

            // adding elements to the arraylist of arraylist
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < M; j++) {
                    int val = sc.nextInt();
                    list.get(i).add(j, val);
                }
            }

            System.out.println(new Islands().findIslands(list, N, M));
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Islands {

    // Function to find the number of island in the given list A
    // N, M: size of list row and column respectively
    static int findIslands(ArrayList<ArrayList<Integer>> A, int N, int M) {
        boolean visited[][] = new boolean[N][M];
        int count = 0;
        for(int i = 0; i < N; i++){
            for(int j = 0; j < M; j++){
                if(A.get(i).get(j) == 1 && !visited[i][j]){
                    dfs(A, i, j, visited, N, M);
                    ++count;
                }
            }
        }
        return count;
    }
    static void dfs(ArrayList<ArrayList<Integer>> adj, int row, int col, boolean visited[][], int N, int M){
        
        int rowNbr[] = new int[] { -1, -1, -1, 0, 0, 1, 1, 1 }; 
        int colNbr[] = new int[] { -1, 0, 1, -1, 1, -1, 0, 1 }; 
  
        // Mark this cell as visited 
        visited[row][col] = true; 
  
        // Recur for all connected neighbours 
        for (int k = 0; k < 8; ++k) 
            if (isSafe(adj, row + rowNbr[k], col + colNbr[k], visited, N, M)) 
                dfs(adj, row + rowNbr[k], col + colNbr[k], visited, N, M);
    }
    static boolean isSafe(ArrayList<ArrayList<Integer>> adj, int row, int col, 
                   boolean visited[][], int N, int M) 
    { 
        // row number is in range, column number is in range 
        // and value is 1 and not yet visited 
        return (row >= 0) && (row < N) && (col >= 0) && (col < M) && (adj.get(row).get(col) == 1 && !visited[row][col]); 
    }
}
